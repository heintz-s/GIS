{
    "componentChunkName": "component---src-components-lecture-page-layout-js",
    "path": "/lecture/db2/0",
    "result": {"data":{"mdx":{"id":"8644172a-c94c-5ebc-b00d-0966076916b9","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NoSQL Datenbanken\",\n  \"date\": \"2022-05-30T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"NoSQL\"), mdx(\"p\", null, \"NoSQL Datenspeicherung (strukturierte Datenspeicher)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not only SQL = Nicht nur SQL -> nicht relationale Datenbanken\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"verschiedene andere Speicherkonzepte (z. B. Dokumentenbasiert, Graphenbasiert, Objektbasiert)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Versuchen Joins zu vermeiden (daf\\xFCr ggf. Daten doppelt und ACID meist nicht unterst\\xFCtzt)\")), mdx(\"p\", null, \"Nachteile relationale Datenbanken\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nicht alle Daten gut als Tabellen darstellbar (z. B. Mediendaten, Texte, unstrukturierte Daten)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schwierigkeiten bei sehr gro\\xDFen Datenmengen und sehr vielen Zugriffen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Joins k\\xF6nnen aufw\\xE4ndig sein und Daten durch Normalisierung un\\xFCbersichtlich\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f\\xFCr Einsatz auf zentralem Server entwickelt (skalieren vertikal, d. h. Ausstattung des Servers muss angepasst werden statt weitere Server)\")), mdx(\"p\", null, \"Vorteile NoSQL Datenspeicherung\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten nicht in starrer Tabellenform -> flexibler, da Tabellen angepasst werden m\\xFCssen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prinzipiell alles speicherbar (Daten mit unbekanntem Aufbau; Daten deren Aufbau sich \\xE4ndert)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Verteilte Datenspeichersysteme, d. h. Daten werden auf mehreren Servern verteilt\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"skalieren horizontal, d. h. bei Bedarf k\\xF6nnen neue Server hinzu genommen werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten k\\xF6nnen von Server bezogen werden, der m\\xF6glichst nah beim Client steht\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"besonders geeignet z. B. f\\xFCr Big Data, Streaming\")), mdx(\"h1\", null, \"MongoDB\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name von humongous = gigantisch (da geeignet f\\xFCr gro\\xDFe Datenmengen)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"verbreitet, besonders in Kombination mit NodeJS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JavaScript (+ zus\\xE4tzliche Operatoren) f\\xFCr Verwaltung und Zugriff statt SQL\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Speichert Daten im \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://bsonspec.org/\"\n  }, \"BSON Format\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Binary JSON\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"optimiert f\\xFCr schnellen Zugriff und geringen Speicherbedarf\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"zus\\xE4tzliche Datentypen, z. B. Datum\")))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/tutorial/getting-started/\"\n  }, \"Getting Started\")), mdx(\"h3\", null, \"Datenbank Aufbau\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Relational\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"MongoDB\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Datenbank\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Datenbank\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Tabelle\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Collection\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Zeile\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Document (16MB size limit)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Spalte\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"beliebig\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Views\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Views\")))), mdx(\"p\", null, \"Jedes Document erh\\xE4lt automatisch eine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" als Schl\\xFCssel.\"), mdx(\"h3\", null, \"Datenmodell\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dokument hat kein festgelegtes Schema innerhalb einer Collection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Struktur von Dokumenten kann sich unterscheiden (z. B. bez\\xFCglich Attributen, Anzahl, Datentypen)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Struktur jedes Dokuments kann nachtr\\xE4glich individuell ver\\xE4ndert werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Normalerweise praktikabel, wenn Dokumente in Collections zumindest \\xE4hnliche Struktur aufweisen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Es kann eine \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.mongodb.com/manual/core/schema-validation/\"\n  }, \"Schema Validierung\"), \" angegeben werden, um Vorgaben zur Struktur zu machen\")), mdx(\"h4\", null, \"eingebettet vs. normalisiert\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Eingebettetes Datenmodell\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten, die meist zusammen abgerufen/bearbeitet werden, zusammen speichern (in Dokument)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Denormalisierung: ein Datensatz in anderen eingebettet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dopplung von Daten ist dabei erlaubt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Datenzugriff dadurch effizienter\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Normalisiertes Datenmodell\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Daten in eigenes Dokument/Collection auslagern wenn:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten nur selten zusammen abgerufen/bearbeitet werden (z. B. fast immer nur ein Teil ben\\xF6tigt)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bei komplexeren/gr\\xF6\\xDFeren Datenstrukturen\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dokumente/Collections verbinden durch:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Referenz (wie ForeignKey bei SQL) als einzelner Wert oder mehrere in Array (maximale Gr\\xF6\\xDFe ber\\xFCcksichtigen)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$lookup operator (wie JOIN) oder zwei Requests ben\\xF6tigt\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Duplikation von Daten vermeiden -> in eigene Collection auslagern\"))))), mdx(\"h4\", null, \"Anmerkungen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Frage nach dem geeigneten Datenmodell durch Flexibilit\\xE4t ggf. schwieriger\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Entscheidung abh\\xE4ngig von den verwendeten Abfragen und deren H\\xE4ufigkeit\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NoSQL: Applikation mit Abfragen zuerst, dann passendes Datenmodell\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Relational: Datenmodell unabh\\xE4ngig von Applikation, dann passende Abfragen\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Auf Effizienz ausgelegt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Konsistenz bei CRUD Operationen muss \\xFCber Code gew\\xE4hrleistet werden\")), mdx(\"h3\", null, \"Beispiel Datenmodell\"), mdx(\"p\", null, \"Collection student\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"1234ab\\\"), studentNr: 123456, firstName: \\\"Klaus\\\", lastName: \\\"Meng\\\", semester: 2, faculty: \\\"DM\\\", course: \\\"OMB\\\", lecture_ids: \", \"[ObjectId(\\\"abc234\\\"), ObjectId(\\\"5de678\\\")]\", \"}\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"23bc45\\\"), studentNr: 234567, firstName: \\\"Verena\\\", lastName: \\\"Rist\\\", semester: 6, faculty: \\\"DM\\\", course: \\\"MIB\\\"}\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"3412ce\\\"), studentNr: 345678, firstName: \\\"Samantha\\\", lastName: \\\"Holz\\\", semester: 1, faculty: \\\"DM\\\", course: \\\"OMB\\\"}\")), mdx(\"p\", null, \"Collection faculty\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"1122aa\\\"), name:\\\"DM\\\", course:\", \"[\\\"MIB\\\", \\\"OMB\\\", \\\"MKB\\\"]\", \"}\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"33ee55\\\"), name:\\\"IN\\\"}\")), mdx(\"p\", null, \"Collection lecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"abc234\\\"), name: \\\"C#\\\", faculty: \\\"IN\\\", student_ids: \", \"[ObjectId(\\\"1234ab\\\")]\", \"}\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{\", \"_\", \"id: ObjectId(\\\"5de678\\\"), name: \\\"Zeichnen\\\", faculty: \\\"DM\\\", student_ids: \", \"[ObjectId(\\\"1234ab\\\")]\", \"}\")), mdx(\"h1\", null, \"MongoDB Starten\"), mdx(\"h3\", null, \"Installieren\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"download \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.mongodb.com/try/download/community\"\n  }, \"MongoDB Community Edition\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"als msi: kann installiert und als Service gestartet werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"als zip: kann \\xFCber Kommandozeile gestartet werden (hier verwendet)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\"\n  }, \"Anleitung f\\xFCr Windows\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f\\xFCr zip: siehe -> Run MongoDB Community Edition from the Command Interpreter\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"zip Datei entpacken (z. B. in MongoDB Ordner)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data/db Ordner anlegen f\\xFCr Datenbank (z. B. ebenfalls in MongoDB Ordner)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB \", mdx(\"br\", null), \"\\n|- data \", mdx(\"br\", null), \"\\n|-- db \", mdx(\"br\", null), \"\\n|- zipInstall \", mdx(\"br\", null), \"\\n|-- bin\")))))), mdx(\"h3\", null, \"Starten (zip Installation)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kommandozeile als Admin starten (Windows 10: Start klicken, cmd eingeben, Rechtsklick -> als Administrator ausf\\xFChren)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mongod.exe in bin Verzeichnis aufrufen und mit --dbpath Pfad zum data\\\\db Ordner spezifizieren, z. B.:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cd C:\\\\MongoDB\"), \" -> zum MongoDB Ordner wechseln (Pfad anpassen)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zipInstall\\\\bin\\\\mongod.exe --dbpath data\\\\db\"), \" -> Datenbanksystem starten\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"beim ersten Start werden einige neue Dateien im data\\\\db Ordner angelegt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"auf \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"zipInstall\\\\bin\\\\mongo.exe\"), \" klicken zum Ausf\\xFChren (oder \\xFCber Kommandozeile aufrufen) -> hier MongoDB Befehle eingeben\")), mdx(\"h1\", null, \"MongoDB Befehle\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/tutorial/getting-started/\"\n  }, \"https://docs.mongodb.com/manual/tutorial/getting-started/\")), mdx(\"h3\", null, \"Datenbank + Collection\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Befehl\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Funktion\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"use db_name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zu Datenbank wechseln\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zeigt aktuelle Datenbank\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show dbs\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zeigt alle Datenbanken (bereits angelegt: admin, config, local)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"show collections\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zeigt alle Collections der aktuellen Datenbank\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.drop()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Collection l\\xF6schen\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Anlegen: Datenbank und Collection wird automatisch erzeugt bei erstem Eintrag\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"existierende DBs: admin, config, local f\\xFCr Management der MongoDB\")), mdx(\"h3\", null, \"Daten CRUD Operationen\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Befehl\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Funktion\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.insertOne(JSONdata)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Dokument als JSON Datensatz in Collection speichern\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.insertMany([JSONdata1, JSONdata2, ...])\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Dokument als JSON Datensatz in Collection speichern\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.find(JSONfind)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"JSON Teil, nach dem in den Dokumenten der Collection gesucht werden soll\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.find()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"zeigt alle Dokumente in einer Collection an\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.replaceOne(JSONfind, JSONupdateData)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Ersetzt das erste Dokument, welches dem JSON Teil entspricht, mit den gegebenen Daten\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.deleteOne(JSONfind)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"L\\xF6scht das erste Dokument, welches dem JSON Teil entspricht\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"db.collection_name.deleteMany(JSONfind)\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"L\\xF6scht alle Dokumente, welche dem JSON Teil entsprechen\")))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/reference/method/\"\n  }, \"weitere\"), \", z. B. auch updateOne\"), mdx(\"h3\", null, \"Beispiel\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show dbs\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> show dbs\\nadmin       0.000GB\\nconfig      0.000GB\\nlocal       0.000GB\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use university\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> use university\\nswitched to db university\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.insertOne({studentNr: 123456, firstName: \\\"Klaus\\\", lastName: \\\"Meng\\\", semester: 2, faculty: \\\"DM\\\", course: \\\"OMB\\\"})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.insertOne({studentNr: 123456, firstName: \\\"Klaus\\\", lastName: \\\"Meng\\\", semester: 2, faculty: \\\"DM\\\", course: \\\"OMB\\\"})\\n{\\n        \\\"acknowledged\\\" : true,\\n        \\\"insertedId\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\")\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.insertMany([{studentNr: 234567, firstName: \\\"Verena\\\", lastName: \\\"Rist\\\", semester: 6, faculty: \\\"DM\\\", course: \\\"MIB\\\"},{studentNr: 345678, firstName: \\\"Samantha\\\", lastName: \\\"Holz\\\", semester: 1, faculty: \\\"DM\\\", course: \\\"OMB\\\"}])\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.insertMany([{studentNr: 234567, firstName: \\\"Verena\\\", lastName: \\\"Rist\\\", semester: 6, faculty: \\\"DM\\\", course: \\\"MIB\\\"},{studentNr: 345678, firstName: \\\"Samantha\\\", lastName: \\\"Holz\\\", semester: 1, faculty: \\\"DM\\\", course: \\\"OMB\\\"}])\\n{\\n        \\\"acknowledged\\\" : true,\\n        \\\"insertedIds\\\" : [\\n                ObjectId(\\\"61a26d0a293da259fc388bc5\\\"),\\n                ObjectId(\\\"61a26d0a293da259fc388bc6\\\")\\n        ]\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.faculty.insertMany([{name:\\\"DM\\\", course:[\\\"MIB\\\", \\\"OMB\\\", \\\"MKB\\\"]}, {name:\\\"IN\\\"}])\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.faculty.insertMany([{name:\\\"DM\\\", course:[\\\"MIB\\\", \\\"OMB\\\", \\\"MKB\\\"]}, {name:\\\"IN\\\"}])\\n{\\n        \\\"acknowledged\\\" : true,\\n        \\\"insertedIds\\\" : [\\n                ObjectId(\\\"61a26d59293da259fc388bc7\\\"),\\n                ObjectId(\\\"61a26d59293da259fc388bc8\\\")\\n        ]\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({studentNr: 123456})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({studentNr: 123456})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\"}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.lecture.insertMany([{name: \\\"C#\\\", faculty_id: 2, student_ids: [ObjectId(\\\"61a26b71293da259fc388bc4\\\")]}, {name: \\\"Zeichnen\\\", faculty_id: 1, student_ids: [ObjectId(\\\"61a26b71293da259fc388bc4\\\")]}])\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"student_ids\"), \": ObjectId von Student mit studentNr 123456, z. B. hier ObjectId(\\\"61a26b71293da259fc388bc4\\\")\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.lecture.insertMany([{name: \\\"C#\\\", faculty_id: 2, student_ids: [ObjectId(\\\"61a26b71293da259fc388bc4\\\")]}, {name: \\\"Zeichnen\\\", faculty_id: 1, student_ids: [ObjectId(\\\"61a26b71293da259fc388bc4\\\")]}])\\n{\\n        \\\"acknowledged\\\" : true,\\n        \\\"insertedIds\\\" : [\\n                ObjectId(\\\"61a26eab293da259fc388bc9\\\"),\\n                ObjectId(\\\"61a26eab293da259fc388bca\\\")\\n        ]\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.replaceOne({_id: ObjectId(\\\"61a26b71293da259fc388bc4\\\")}, {\\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", lecture_ids:[ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\")]})\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_id\"), \": ObjectId von Student mit studentNr 123456, z. B. hier ObjectId(\\\"61a26b71293da259fc388bc4\\\")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lecture_ids\"), \": ObjectIds von neu erstellten lectures bei Student mit studentNr 123456 eintragen, z. B. hier ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\")\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.replaceOne({_id: ObjectId(\\\"61a26b71293da259fc388bc4\\\")}, {\\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", lecture_ids:[ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\")]})\\nWriteResult({ \\\"nMatched\\\" : 1, \\\"nUpserted\\\" : 0, \\\"nModified\\\" : 1 })\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({studentNr: 123456})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({studentNr: 123456})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.faculty.find()\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.faculty.find()\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d59293da259fc388bc7\\\"), \\\"name\\\" : \\\"DM\\\", \\\"course\\\" : [ \\\"MIB\\\", \\\"OMB\\\", \\\"MKB\\\" ] }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d59293da259fc388bc8\\\"), \\\"name\\\" : \\\"IN\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({course: \\\"OMB\\\"})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({course: \\\"OMB\\\"})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc6\\\"), \\\"studentNr\\\" : 345678, \\\"firstName\\\" : \\\"Samantha\\\", \\\"lastName\\\" : \\\"Holz\\\", \\\"semester\\\" : 1, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({course: \\\"OMB\\\", semester: 1})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({course: \\\"OMB\\\", semester: 1})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc6\\\"), \\\"studentNr\\\" : 345678, \\\"firstName\\\" : \\\"Samantha\\\", \\\"lastName\\\" : \\\"Holz\\\", \\\"semester\\\" : 1, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show collections\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> show collections\\nfaculty\\nlecture\\nstudent\\n\")), mdx(\"h1\", null, \"MongoDB Operatoren\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/reference/operator/\"\n  }, \"https://docs.mongodb.com/manual/reference/operator/\")), mdx(\"h3\", null, \"Abfrageoperatoren\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.collection_name.find({property_name: {$operator: value}})\")), mdx(\"p\", null, \"Beispiele:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Studenten mit Semester < 3: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"db.student.find({semester: {$lt: 3}})\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Studenten in einem der beiden Kurse \\\"OMB\\\" oder \\\"MKB\\\": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"db.student.find({course: {$in: [\\\"OMB\\\", \\\"MKB\\\"]}})\"))), mdx(\"p\", null, \"Operatoren:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$eq (equals), $lt (less than), $gt (greater than), $in (in)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"kombiniert\"), \": $lte (less or equals), $gte (greater or equals)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"negiert\"), \": $ne (not equals), $nin (not in)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/reference/operator/query/\"\n  }, \"mehr\")), mdx(\"h3\", null, \"Abfragen kombinieren\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.collection_name.find({ $kombinator: [JSONfind, JSONfind]})\")), mdx(\"p\", null, \"Beispiele:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Student in OMB oder in Semester 6: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"db.student.find({ $or: [{course: \\\"OMB\\\"}, {semester: 6}]})\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Student in OMB und Semester >= 2: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"db.student.find({ $and: [{course: \\\"OMB\\\"}, {semester: {$gte: 2}}]})\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alternativ: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"db.student.find({course:\\\"OMB\\\", semester: {$gte: 2}})\"))))), mdx(\"p\", null, \"Operatoren:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$and (und Verbindung), $or (oder Verbindung)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/reference/operator/query/\"\n  }, \"mehr\")), mdx(\"h3\", null, \"Ergebnisse f\\xFCr Beispiele\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({semester: {$lt: 3}})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({semester: {$lt: 3}})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc6\\\"), \\\"studentNr\\\" : 345678, \\\"firstName\\\" : \\\"Samantha\\\", \\\"lastName\\\" : \\\"Holz\\\", \\\"semester\\\" : 1, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({course: {$in: [\\\"OMB\\\", \\\"MKB\\\"]}})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({course: {$in: [\\\"OMB\\\", \\\"MKB\\\"]}})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc6\\\"), \\\"studentNr\\\" : 345678, \\\"firstName\\\" : \\\"Samantha\\\", \\\"lastName\\\" : \\\"Holz\\\", \\\"semester\\\" : 1, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({ $or: [{course: \\\"OMB\\\"}, {semester: 6}]})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({ $or: [{course: \\\"OMB\\\"}, {semester: 6}]})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc5\\\"), \\\"studentNr\\\" : 234567, \\\"firstName\\\" : \\\"Verena\\\", \\\"lastName\\\" : \\\"Rist\\\", \\\"semester\\\" : 6, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"MIB\\\" }\\n{ \\\"_id\\\" : ObjectId(\\\"61a26d0a293da259fc388bc6\\\"), \\\"studentNr\\\" : 345678, \\\"firstName\\\" : \\\"Samantha\\\", \\\"lastName\\\" : \\\"Holz\\\", \\\"semester\\\" : 1, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\" }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({ $and: [{course: \\\"OMB\\\"}, {semester: {$gte: 2}}]})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({ $and: [{course: \\\"OMB\\\"}, {semester: {$gte: 2}}]})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.student.find({course:\\\"OMB\\\", semester: {$gte: 2}})\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"> db.student.find({course:\\\"OMB\\\", semester: {$gte: 2}})\\n{ \\\"_id\\\" : ObjectId(\\\"61a26b71293da259fc388bc4\\\"), \\\"studentNr\\\" : 123456, \\\"firstName\\\" : \\\"Klaus\\\", \\\"lastName\\\" : \\\"Meng\\\", \\\"semester\\\" : 2, \\\"faculty\\\" : \\\"DM\\\", \\\"course\\\" : \\\"OMB\\\", \\\"lecture_ids\\\" : [ ObjectId(\\\"61a26eab293da259fc388bc9\\\"), ObjectId(\\\"61a26eab293da259fc388bca\\\") ] }\\n\")), mdx(\"h1\", null, \"MongoDB + Node.js\"), mdx(\"h3\", null, \"Einrichten\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MongoDB Modul f\\xFCr Node.js installieren (in Projektordner)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npm install mongodb\"))))), mdx(\"h3\", null, \"MongoDB in Node.js verwenden\"), mdx(\"h4\", null, \"MongoDB Modul in Node.js Code verwenden\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const mongodb = require('mongodb');\\n\")), mdx(\"h4\", null, \"Mit Datenbank verbinden\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const url = 'mongodb://localhost:27017'; // f\\xFCr lokale MongoDB\\nconst mongoClient = new mongodb.MongoClient(url, options);\\nawait mongoClient.connect();\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.mongodb.com/manual/reference/connection-string/\"\n  }, \"MongoDB Verbindungs-URL Aufbau\")), mdx(\"h4\", null, \"Collection ausw\\xE4hlen\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const collection = mongoClient.db('db_name').collection('collection_name');\\nawait collection.insert({...});\\nconsole.log(await collection.find({...}).toArray());\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Befehle von Kommandozeile genauso in JavaScript verwendbar (MongoDB muss gestartet sein)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ausnahme: find gibt ein Cursor Objekt zur\\xFCck, welches mit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"toArray()\"), \" in ein Array gewandelt werden kann\")), mdx(\"h3\", null, \"Node.js Beispiel\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const mongodb = require('mongodb');\\n\\nconst mongoUrl = 'mongodb://localhost:27017'; // f\\xFCr lokale MongoDB\\nconst mongoClient = new mongodb.MongoClient(mongoUrl);\\n\\nasync function main() {\\n  await mongoClient.connect();\\n  const db = mongoClient.db(\\\"university\\\");\\n  const studentCollection = db.collection(\\\"student\\\");\\n\\n  const newStudent = {\\n    studentNr: 333333,\\n    firstName: \\\"Max\\\",\\n    lastName: \\\"Mustermann\\\",\\n    semester: 1,\\n    faculty: \\\"DM\\\",\\n    course: \\\"OMB\\\",\\n  };\\n  await studentCollection.insertOne(newStudent);\\n  const students = await studentCollection.find({ studentNr: 333333 }).toArray();\\n  console.log(students);\\n  await mongoClient.close();\\n}\\n\\nmain();\\n\")), mdx(\"h1\", null, \"HTTP + MongoDB\"), mdx(\"p\", null, \"Beispielanwendung zum Hinzuf\\xFCgen und Auslesen von Studenten Informationen (async/await beachten)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const http = require('http');\\nconst mongodb = require('mongodb');\\n\\nconst hostname = '127.0.0.1'; // localhost\\nconst port = 3000;\\nconst url = 'mongodb://localhost:27017'; // f\\xFCr lokale MongoDB\\nconst mongoClient = new mongodb.MongoClient(url);\\n\\nasync function startServer() {\\n  // connect to database\\n  await mongoClient.connect();\\n  // listen for requests\\n  server.listen(port, hostname, () => {\\n    console.log(`Server running at http://${hostname}:${port}/`);\\n  });\\n}\\n\\nconst server = http.createServer(async (request, response) => {\\n    response.statusCode = 200;\\n    response.setHeader('Access-Control-Allow-Origin', '*'); // bei CORS Fehler\\n    let url = new URL(request.url || '', `http://${request.headers.host}`);\\n    switch (url.pathname) {\\n      case '/student': {\\n        const studentCollection = mongoClient.db('university').collection('student');\\n        switch (request.method) {\\n          case 'GET':\\n            let result;\\n            if(url.searchParams.get('studentNr')){\\n              result = await studentCollection.find({\\n                studentNr: Number(url.searchParams.get('studentNr')), // von String zu Zahl konvertieren\\n              });\\n            }\\n            else {\\n              result = await studentCollection.find({});\\n            }\\n            response.setHeader('Content-Type', 'application/json');\\n            response.write(JSON.stringify(result.toArray()));\\n            break;\\n          case 'POST':\\n            let jsonString = '';\\n            request.on('data', data => {\\n              jsonString += data;\\n            });\\n            request.on('end', async () => {\\n              studentCollection.insertOne(JSON.parse(jsonString));\\n            });\\n            break;\\n        }\\n        break;\\n      }\\n      case '/clearAll':\\n        await mongoClient.db('university').collection('student').drop();\\n        break;\\n      default:\\n        response.statusCode = 404;\\n    }\\n    response.end();\\n  }\\n);\\n\\nstartServer();\\n\")), mdx(\"p\", null, \"\\xDCber URLs testen:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://localhost:3000/student?studentNr=123456\"\n  }, \"http://localhost:3000/student?studentNr=123456\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://localhost:3000/student\"\n  }, \"http://localhost:3000/student\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"async function addStudent(url, jsonString) {\\n  const response = await fetch(url, {\\n    method: 'post',\\n    body: jsonString,\\n  });\\n}\\n\\nasync function getStudent(studentNr) {\\n  const response = await fetch(\\n    `http://localhost:3000/student?studentNr=${studentNr}`\\n  );\\n  const text = await response.text();\\n  console.log(JSON.parse(text));\\n}\\n\\nasync function getAllStudents(): Promise<void> {\\n  const response = await fetch('http://localhost:3000/student');\\n  const text = await response.text();\\n  console.log(JSON.parse(text));\\n}\\n\\nasync function test() {\\n  await addStudent(\\n    'http://localhost:3000/student',\\n    JSON.stringify({\\n      studentNr: 111111,\\n      firstName: 'Adam',\\n      lastName: 'Anfang',\\n      semester: 1,\\n      faculty: 'DM',\\n      course: 'MKB',\\n    })\\n  );\\n  await getStudent(111111);\\n  await getAllStudents();\\n}\\n\\ntest();\\n\")), mdx(\"h3\", null, \"MongoId verwenden\"), mdx(\"p\", null, \"Meist wird keine eigene ID vergeben (wie bei studentenNr), sondern die automatisch von MongoDB erzeugte \", \"_\", \"id zum Zugriff (read, update, delete) verwendet\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"diese wird automatisch beim Speichern jedes neuen Dokuments erstellt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dem JSON Datensatz wird dazu das Attribut \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_id\"), \" hinzugef\\xFCgt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"es handelt sich dabei nicht um eine Zahl, sondern eine ObjektID -> erfodert ggf. Umwandlung von Zahl/String zu ObjektID mit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"new mongodb.ObjectId(id)\"))), mdx(\"p\", null, \"Beispiel Verwendung im Code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"result = await studentCollection.find({\\n  _id: new mongodb.ObjectId(url.searchParams.get('id')), // von String zu Zahl konvertieren\\n});\\n\")), mdx(\"h1\", null, \"Projetstruktur\"), mdx(\"p\", null, \"Prinzipiell kann die Struktur eines Projekts frei gew\\xE4hlt werden. Es ist zu empfehlen, die Dateien eines Projekts in einer Ordnerstruktur nach Zugeh\\xF6rigkeit und unterteilen.\"), mdx(\"h3\", null, \"Beispiel f\\xFCr grundlegende Projektstruktur\"), mdx(\"p\", null, \"ProjektName \", mdx(\"br\", null), \"\\n|- Backend \", mdx(\"br\", null), \"\\n|-- server.js \", mdx(\"br\", null), \"\\n|- Database \", mdx(\"br\", null), \"\\n|-- data \", mdx(\"br\", null), \"\\n|--- db \", mdx(\"br\", null), \"\\n|-- zipInstall \", mdx(\"br\", null), \"\\n|--- bin \", mdx(\"br\", null), \"\\n|- Frontend \", mdx(\"br\", null), \"\\n|-- css \", mdx(\"br\", null), \"\\n|--- styles.css \", mdx(\"br\", null), \"\\n|-- src \", mdx(\"br\", null), \"\\n|--- headerFooter.js \", mdx(\"br\", null), \"\\n|--- data.js \", mdx(\"br\", null), \"\\n|--- index.js \", mdx(\"br\", null), \"\\n|--- ... \", mdx(\"br\", null), \"\\n|-- index.html \", mdx(\"br\", null), \"\\n|-- ... \", mdx(\"br\", null)), mdx(\"h3\", null, \"Batch Datei erstellen\"), mdx(\"p\", null, \"Dateien mit Befehlen zum Start der DB und des Servers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"einfache Textdatei\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kommandozeilenbefehle in Datei als Text\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dateiendung von .txt zu .cmd oder .bat \\xE4ndern\")), mdx(\"p\", null, \"Beispiel f\\xFCr obige Projektstruktur:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Dateien startDatabase.cmd und startBackend.cmd in ProjektName Ordner speichern\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"startDatabase.cmd\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"Database\\\\zipInstall\\\\bin\\\\mongod.exe --dbpath Database\\\\data\\\\db\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"startBackend.cmd\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"node Backend/server.js\\n\")))), mdx(\"h3\", null, \"VSCode live server Settings\"), mdx(\"p\", null, \"VSCode live server nur f\\xFCr Frontend verwenden (vor allem DB Dateien m\\xFCssen ausgeschlossen werden, da es sonst zu Fehlern kommt)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"im Projektordner (ProjektName) einen .vscode Ordner anlegen mit settings.json (ben\\xF6tigt, falls gesamter Projektordner in VSCode ge\\xF6ffnet wird)\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\"\n  }, \"{\\n  \\\"liveServer.settings.root\\\": \\\"/Frontend\\\"\\n}\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Backend \\xFCber node bei \\xC4nderungen immer neu starten\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Datenbank bei Fehlern ggf. neu starten\")), mdx(\"h1\", null, \"Linksammlung\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://link.springer.com/content/pdf/10.1007%2F978-3-030-42224-0.pdf\"\n  }, \"https://link.springer.com/content/pdf/10.1007%2F978-3-030-42224-0.pdf\")), mdx(\"h3\", null, \"NoSQL\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.ionos.de/digitalguide/hosting/hosting-technik/nosql/\"\n  }, \"https://www.ionos.de/digitalguide/hosting/hosting-technik/nosql/\")), mdx(\"h3\", null, \"MongoDB\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mongodb.com/blog/post/performance-best-practices-mongodb-data-modeling-and-memory-sizing\"\n  }, \"https://www.mongodb.com/blog/post/performance-best-practices-mongodb-data-modeling-and-memory-sizing\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mongodb.com/developer/article/mongodb-schema-design-best-practices/\"\n  }, \"https://www.mongodb.com/developer/article/mongodb-schema-design-best-practices/\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"NoSQL Datenbanken","date":"30. Mai 2022"}}},"pageContext":{"id":"8644172a-c94c-5ebc-b00d-0966076916b9","heading":{},"index":0,"prevSlug":"/lecture/db/7","nextSlug":"/lecture/db2/1"}},
    "staticQueryHashes": ["170874137"]}