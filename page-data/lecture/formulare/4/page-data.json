{
    "componentChunkName": "component---src-components-lecture-page-layout-js",
    "path": "/lecture/formulare/4",
    "result": {"data":{"mdx":{"id":"dd144e4f-7eb2-5e0a-9aee-37690d374be5","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Formulare + Web-App\",\n  \"date\": \"2021-12-13T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"HTTP + MongoDB\"), mdx(\"p\", null, \"Beispielanwendung zum Hinzuf\\xFCgen und Auslesen von Studenten Informationen\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import * as http from \\\"http\\\";\\nimport * as mongo from \\\"mongodb\\\";\\n\\nconst hostname: string = \\\"127.0.0.1\\\"; // localhost\\nconst port: number = 3000;\\nconst mongoUrl: string = \\\"mongodb://localhost:27017\\\"; // f\\xFCr lokale MongoDB\\nlet mongoClient: mongo.MongoClient = new mongo.MongoClient(mongoUrl);\\n\\nasync function dbFind(\\n  db: string,\\n  collection: string,\\n  requestObject: any,\\n  response: http.ServerResponse\\n) {\\n  let result = await mongoClient\\n    .db(db)\\n    .collection(collection)\\n    .find(requestObject)\\n    .toArray();\\n  // console.log(result, requestObject); // bei Fehlern zum Testen\\n  response.setHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\n  response.write(JSON.stringify(result));\\n}\\n\\nconst server: http.Server = http.createServer(\\n  async (request: http.IncomingMessage, response: http.ServerResponse) => {\\n    response.statusCode = 200;\\n    // response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\"); // bei CORS Fehler\\n    let url: URL = new URL(request.url || \\\"\\\", `http://${request.headers.host}`);\\n    switch (url.pathname) {\\n      case \\\"/student\\\": {\\n        await mongoClient.connect();\\n        switch (request.method) {\\n          case \\\"GET\\\":\\n            await dbFind(\\n              \\\"university\\\",\\n              \\\"student\\\",\\n              {\\n                studentNr: Number(url.searchParams.get(\\\"studentNr\\\")), // von String zu Zahl konvertieren\\n              },\\n              response\\n            );\\n            break;\\n          case \\\"POST\\\":\\n            let jsonString = \\\"\\\";\\n            request.on(\\\"data\\\", data => {\\n              jsonString += data;\\n            });\\n            request.on(\\\"end\\\", async () => {\\n              mongoClient\\n                .db(\\\"university\\\")\\n                .collection(\\\"student\\\")\\n                .insertOne(JSON.parse(jsonString));\\n            });\\n            break;\\n        }\\n        break;\\n      }\\n      case \\\"/students\\\": {\\n        await mongoClient.connect();\\n        switch (request.method) {\\n          case \\\"GET\\\":\\n            await dbFind(\\\"university\\\", \\\"student\\\", {}, response);\\n            break;\\n        }\\n        break;\\n      }\\n      default:\\n        response.statusCode = 404;\\n    }\\n    response.end();\\n  }\\n);\\n\\nserver.listen(port, hostname, () => {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\\n\")), mdx(\"p\", null, \"\\xDCber URLs testen:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://localhost:3000/student?studentNr=123456\"\n  }, \"http://localhost:3000/student?studentNr=123456\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://localhost:3000/students\"\n  }, \"http://localhost:3000/students\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"async function sendJSONStringWithPOST(\\n  url: RequestInfo,\\n  jsonString: string\\n): Promise<void> {\\n  let response: Response = await fetch(url, {\\n    method: \\\"post\\\",\\n    body: jsonString,\\n  });\\n}\\n\\nasync function requestStudent(studentNr: number): Promise<void> {\\n  let response: Response = await fetch(\\n    `http://localhost:3000/student?studentNr=${studentNr}`\\n  );\\n  let text: string = await response.text();\\n  console.log(JSON.parse(text));\\n}\\n\\nasync function requestStudents(): Promise<void> {\\n  let response: Response = await fetch(\\\"http://localhost:3000/students\\\");\\n  let text: string = await response.text();\\n  console.log(JSON.parse(text));\\n}\\n\\nasync function test() {\\n  await sendJSONStringWithPOST(\\n    \\\"http://localhost:3000/student\\\",\\n    JSON.stringify({\\n      studentNr: 111111,\\n      firstName: \\\"Adam\\\",\\n      lastName: \\\"Anfang\\\",\\n      semester: 1,\\n      faculty: \\\"DM\\\",\\n      course: \\\"MKB\\\",\\n    })\\n  );\\n  await requestStudent(111111);\\n  await requestStudents();\\n}\\n\\ntest();\\n\")), mdx(\"h1\", null, \"Formulare\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Element\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Beschreibung\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"form\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Formular, welches aus Labels und Eingaben besteht \", mdx(\"br\", null), \" - \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"action\"), \" Attribut f\\xFCr Zieladresse (Versand mit \\\"submit\\\" Button; URL darf keinen Suchteil beinhalten)\", mdx(\"br\", null), \" - \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"method\"), \" Attribut f\\xFCr HTTP-Methode (optional, GET default)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"label\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Beschriftungen \", mdx(\"br\", null), \" - \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"for\"), \" Attribut = Input Element ID (zum Zuordnen)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"input\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"verschiedene Arten von Benutzereingaben \", mdx(\"br\", null), \" - \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"type\"), \" Attribut f\\xFCr Art des Inputs z. B. text, password, date, file, color, radio, checkbox, number, range\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"select + option\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Auswahlliste\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"textarea\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"mehrzeiliges Eingabefeld\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"button\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Benutzerinteraktion durch Anklicken \", mdx(\"br\", null), \" \", mdx(\"em\", {\n    parentName: \"td\"\n  }, \"type\"), \" Attribut mit Werten: \", mdx(\"br\", null), \" - \\\"submit\\\" (default): Daten werden bei Klick automatisch versendet \", mdx(\"br\", null), \" - \\\"button\\\": f\\xFCr Eventhandling mit JavaScript (z. B. Klick Event)\", mdx(\"br\", null), \" - \\\"reset\\\": Setzt Eingaben im Formular zur\\xFCck (meist nicht ben\\xF6tigt)\")))), mdx(\"h3\", null, \"Daten auslesen/versenden\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"form Element umschlie\\xDFt die anderen Elemente (alternativ: Elemente mit \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"form\"), \" Attribut = Form Element ID zuordnen)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"name\"), \" Attribut f\\xFCr input/select/textarea/button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"value\"), \" Attribut f\\xFCr vorbelegte Werte, oder Wertzuordnung bei radio/checkbox/option/button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"aus \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"name\"), \" Attribut + value (Attributwert oder Usereingabe) wird Name/Werte Liste f\\xFCr Formular erstellt (beim Versenden, bzw. mit FormData)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<form>\\n  <div>\\n    <label for=\\\"name\\\">Name:</label>\\n    <input id=\\\"name\\\" name=\\\"username\\\" type=\\\"text\\\" />\\n    <label for=\\\"password\\\">Passwort:</label>\\n    <input id=\\\"password\\\" name=\\\"password\\\" type=\\\"password\\\" />\\n  </div>\\n  <div>\\n    <input type=\\\"date\\\" />\\n    <input type=\\\"file\\\" />\\n    <input type=\\\"color\\\" />\\n    <input type=\\\"number\\\" />\\n    <input type=\\\"range\\\" />\\n  </div>\\n  <div>\\n    <input type=\\\"radio\\\" name=\\\"farbe\\\" value=\\\"Rot\\\" /><label>Rot</label>\\n    <input type=\\\"radio\\\" name=\\\"farbe\\\" value=\\\"Gr\\xFCn\\\" /><label>Gr\\xFCn</label>\\n    <input type=\\\"radio\\\" name=\\\"farbe\\\" value=\\\"Blau\\\" /><label>Blau</label>\\n    <br />\\n    <input type=\\\"checkbox\\\" />\\n  </div>\\n</form>\\n\")), mdx(\"h1\", null, \"Formulare und TypeScript\"), mdx(\"p\", null, \"Bei Klick auf \\\"submit\\\" Button wird automatisch List mit Name/Wert Paaren (hintereinander mit & verbunden) an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action\"), \" Adresse versendet und die Seite neu geladen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"submit\\\" Event kann mit TypeScript abgefangen werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"versenden und neu laden kann mit \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://wiki.selfhtml.org/wiki/JavaScript/DOM/Event/preventDefault\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"event.preventDefault()\")), \" verhindert werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten k\\xF6nnen mit \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/de/docs/Web/API/FormData\"\n  }, \"FormData Objekt\"), \" ausgelesen (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"new FormData(form)\"), \") und \\xFCber \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".get(name)\"), \" auf Werte zugegriffen werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten k\\xF6nnen aufbereitet werden (z. B. als JSON) und mit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fetch\"), \" gesendet werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"neu laden und Wartezeit k\\xF6nnen so umgangen werden\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<form id=\\\"studentForm\\\">\\n  <h3>Student*in</h3>\\n  <label for=\\\"studentNr\\\">MatrikelNr:</label>\\n  <input id=\\\"studentNr\\\" name=\\\"studentNr\\\" type=\\\"number\\\" />\\n  <label for=\\\"firstName\\\">Vorname:</label>\\n  <input id=\\\"firstName\\\" name=\\\"firstName\\\" type=\\\"text\\\" />\\n  <label for=\\\"lastName\\\">Nachname:</label>\\n  <input id=\\\"lastName\\\" name=\\\"lastName\\\" type=\\\"text\\\" />\\n  <div id=\\\"semester\\\" class=\\\"radioGroup\\\">\\n    <label>Semester:</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"1\\\" />1</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"2\\\" />2</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"3\\\" />3</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"4\\\" />4</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"5\\\" />5</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"6\\\" />6</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"7\\\" />7</label>\\n  </div>\\n  <button id=\\\"save\\\" type=\\\"submit\\\">Speichern</button>\\n</form>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"form {\\n  padding: 0em 1em;\\n}\\n\\nlabel {\\n  float: left;\\n  margin-right: 0.2em;\\n}\\n\\ninput,\\nselect {\\n  display: block;\\n  margin-bottom: 0.5em;\\n}\\n\\n.radioGroup label {\\n  float: initial;\\n}\\n\\n.radioGroup input {\\n  display: initial;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"interface Student {\\n  studentNr: number;\\n  firstName: string;\\n  lastName: string;\\n  semester?: number;\\n}\\n\\nlet studentForm: HTMLFormElement = <HTMLFormElement>(\\n  document.getElementById(\\\"studentForm\\\")\\n);\\nstudentForm.addEventListener(\\\"submit\\\", onSubmitStudentForm);\\n\\nasync function onSubmitStudentForm(event: Event) {\\n  event.preventDefault();\\n  let formData: FormData = new FormData(<HTMLFormElement>event.currentTarget);\\n  let student: Student = {\\n    studentNr: formData.get(\\\"studentNr\\\"),\\n    firstName: formData.get(\\\"firstName\\\"),\\n    lastName: formData.get(\\\"lastName\\\"),\\n    semester: formData.get(\\\"semester\\\"),\\n  };\\n  console.log(student);\\n  await fetch(\\\"http://localhost:3000/student\\\", {\\n    method: \\\"post\\\",\\n    body: JSON.stringify(student),\\n  });\\n}\\n\")), mdx(\"h1\", null, \"Beispielanwendung\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Studierende \\xFCber Tabelle ausgeben\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Student\", \"*\", \"in \\xFCber Formular neu anlegen/bearbeiten\")), mdx(\"details\", null, mdx(\"summary\", null, \"Node.js Code Student Web-App:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import * as http from \\\"http\\\";\\nimport * as mongo from \\\"mongodb\\\";\\n\\nconst hostname: string = \\\"127.0.0.1\\\"; // localhost\\nconst port: number = 3000;\\nconst mongoUrl: string = \\\"mongodb://localhost:27017\\\"; // f\\xFCr lokale MongoDB\\nlet mongoClient: mongo.MongoClient = new mongo.MongoClient(mongoUrl);\\n\\nasync function dbFind(\\n  db: string,\\n  collection: string,\\n  requestObject: any,\\n  response: http.ServerResponse\\n) {\\n  await mongoClient.connect();\\n  let result = await mongoClient\\n    .db(db)\\n    .collection(collection)\\n    .find(requestObject)\\n    .toArray();\\n  // console.log(result, requestObject); // bei Fehlern zum Testen\\n  response.setHeader(\\\"Content-Type\\\", \\\"application/json\\\");\\n  response.write(JSON.stringify(result));\\n}\\n\\nasync function dbAddOrEdit(\\n  db: string,\\n  collection: string,\\n  request: http.IncomingMessage\\n) {\\n  let jsonString = \\\"\\\";\\n  request.on(\\\"data\\\", data => {\\n    jsonString += data;\\n  });\\n  request.on(\\\"end\\\", async () => {\\n    await mongoClient.connect();\\n    // console.log(jsonString); // bei Fehlern zum Testen\\n    let student = JSON.parse(jsonString);\\n    if (student._id && student._id !== \\\"\\\") {\\n      student._id = new mongo.ObjectId(student._id);\\n      mongoClient.db(db).collection(collection).replaceOne(\\n        {\\n          _id: student._id,\\n        },\\n        student\\n      );\\n    } else {\\n      student._id = undefined;\\n      mongoClient.db(db).collection(collection).insertOne(student);\\n    }\\n  });\\n}\\n\\nconst server: http.Server = http.createServer(\\n  async (request: http.IncomingMessage, response: http.ServerResponse) => {\\n    response.statusCode = 200;\\n    response.setHeader(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\"); // bei CORS Fehler\\n    let url: URL = new URL(request.url || \\\"\\\", `http://${request.headers.host}`);\\n    switch (url.pathname) {\\n      case \\\"/student\\\": {\\n        switch (request.method) {\\n          case \\\"GET\\\":\\n            await dbFind(\\n              \\\"university\\\",\\n              \\\"student\\\",\\n              {\\n                _id: new mongo.ObjectId(url.searchParams.get(\\\"_id\\\")), // von String zu Zahl konvertieren\\n              },\\n              response\\n            );\\n            break;\\n          case \\\"POST\\\":\\n            await dbAddOrEdit(\\\"university\\\", \\\"student\\\", request);\\n            break;\\n        }\\n        break;\\n      }\\n      case \\\"/faculty\\\": {\\n        switch (request.method) {\\n          case \\\"POST\\\":\\n            await dbAddOrEdit(\\\"university\\\", \\\"faculty\\\", request);\\n            break;\\n        }\\n        break;\\n      }\\n      case \\\"/students\\\": {\\n        switch (request.method) {\\n          case \\\"GET\\\":\\n            await dbFind(\\\"university\\\", \\\"student\\\", {}, response);\\n            break;\\n        }\\n        break;\\n      }\\n      case \\\"/faculties\\\": {\\n        switch (request.method) {\\n          case \\\"GET\\\":\\n            await dbFind(\\\"university\\\", \\\"faculty\\\", {}, response);\\n            break;\\n        }\\n        break;\\n      }\\n      default:\\n        response.statusCode = 404;\\n    }\\n    response.end();\\n  }\\n);\\n\\nserver.listen(port, hostname, () => {\\n  console.log(`Server running at http://${hostname}:${port}/`);\\n});\\n\"))), mdx(\"details\", null, mdx(\"summary\", null, \"Datenbank mit Beispieldaten bef\\xFCllen (einmal ausf\\xFChren)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"async function sendJSONStringWithPOST(\\n  url: RequestInfo,\\n  jsonString: string\\n): Promise<void> {\\n  await fetch(url, { method: \\\"post\\\", body: jsonString });\\n}\\n\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/student\\\",\\n  JSON.stringify({\\n    studentNr: 111111,\\n    firstName: \\\"Adam\\\",\\n    lastName: \\\"Anfang\\\",\\n    semester: 1,\\n    faculty: \\\"DM\\\",\\n    course: \\\"MKB\\\",\\n  })\\n);\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/student\\\",\\n  JSON.stringify({\\n    studentNr: 123456,\\n    firstName: \\\"Klaus\\\",\\n    lastName: \\\"Meng\\\",\\n    semester: 2,\\n    faculty: \\\"DM\\\",\\n    course: \\\"OMB\\\",\\n  })\\n);\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/student\\\",\\n  JSON.stringify({\\n    studentNr: 234567,\\n    firstName: \\\"Verena\\\",\\n    lastName: \\\"Rist\\\",\\n    semester: 6,\\n    faculty: \\\"DM\\\",\\n    course: \\\"MIB\\\",\\n  })\\n);\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/student\\\",\\n  JSON.stringify({\\n    studentNr: 345678,\\n    firstName: \\\"Samantha\\\",\\n    lastName: \\\"Holz\\\",\\n    semester: 1,\\n    faculty: \\\"DM\\\",\\n    course: \\\"OMB\\\",\\n  })\\n);\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/faculty\\\",\\n  JSON.stringify({\\n    name: \\\"DM\\\",\\n    course: [\\\"MIB\\\", \\\"OMB\\\", \\\"MKB\\\"],\\n  })\\n);\\nsendJSONStringWithPOST(\\n  \\\"http://localhost:3000/faculty\\\",\\n  JSON.stringify({\\n    name: \\\"IN\\\",\\n    course: [\\\"AIB\\\"],\\n  })\\n);\\n\"))), mdx(\"details\", null, mdx(\"summary\", null, \"HTML Code Student Web-App:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<button id=\\\"add\\\">+</button>\\n<table id=\\\"studentTable\\\">\\n  <thead>\\n    <tr>\\n      <th>matrikelNr</th>\\n      <th>Vorname</th>\\n      <th>Nachname</th>\\n      <th>Semester</th>\\n      <th>Fakult\\xE4t</th>\\n      <th>Studiengang</th>\\n    </tr>\\n  </thead>\\n  <tbody></tbody>\\n</table>\\n\\n<form id=\\\"studentForm\\\" class=\\\"hide\\\">\\n  <h3>Student*in</h3>\\n  <input id=\\\"_id\\\" class=\\\"hide\\\" name=\\\"_id\\\" type=\\\"text\\\" />\\n  <label for=\\\"studentNr\\\">MatrikelNr:</label>\\n  <input id=\\\"studentNr\\\" name=\\\"studentNr\\\" type=\\\"number\\\" />\\n  <label for=\\\"firstName\\\">Vorname:</label>\\n  <input id=\\\"firstName\\\" name=\\\"firstName\\\" type=\\\"text\\\" />\\n  <label for=\\\"lastName\\\">Nachname:</label>\\n  <input id=\\\"lastName\\\" name=\\\"lastName\\\" type=\\\"text\\\" />\\n  <div id=\\\"semester\\\" class=\\\"radioGroup\\\">\\n    <label>Semester:</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"1\\\" />1</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"2\\\" />2</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"3\\\" />3</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"4\\\" />4</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"5\\\" />5</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"6\\\" />6</label>\\n    <label><input type=\\\"radio\\\" name=\\\"semester\\\" value=\\\"7\\\" />7</label>\\n  </div>\\n  <label for=\\\"faculty\\\">Fakult\\xE4t:</label>\\n  <select id=\\\"faculty\\\" name=\\\"faculty\\\"></select>\\n  <label for=\\\"course\\\">Studiengang:</label>\\n  <select id=\\\"course\\\" name=\\\"course\\\"></select>\\n  <button id=\\\"cancel\\\" type=\\\"button\\\">x</button>\\n  <button id=\\\"save\\\" type=\\\"submit\\\">Speichern</button>\\n</form>\\n\"))), mdx(\"details\", null, mdx(\"summary\", null, \"CSS Code Student Web-App:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"table,\\nth,\\ntd {\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n  padding: 0.3em;\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nform {\\n  position: fixed;\\n  left: 10%;\\n  right: 10%;\\n  top: 10%;\\n  bottom: 10%;\\n  background: lightgrey;\\n  padding: 0em 1em;\\n}\\n\\n.hide {\\n  display: none;\\n}\\n\\nlabel {\\n  float: left;\\n  margin-right: 0.2em;\\n}\\n\\ninput,\\nselect {\\n  display: block;\\n  margin-bottom: 0.5em;\\n}\\n\\n.radioGroup label {\\n  float: initial;\\n}\\n\\n.radioGroup input {\\n  display: initial;\\n}\\n\\n#cancel {\\n  position: absolute;\\n  right: 1em;\\n  top: 1em;\\n}\\n\"))), mdx(\"details\", null, mdx(\"summary\", null, \"TypeScript Code Student Web-App:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"//Interfaces\\ninterface Student {\\n  _id?: string;\\n  studentNr: number;\\n  firstName: string;\\n  lastName: string;\\n  semester?: number;\\n  faculty?: string;\\n  course?: string;\\n}\\n\\ninterface Faculty {\\n  _id?: string;\\n  name: string;\\n  course?: string[];\\n}\\n\\n//fetch Methoden\\nasync function sendJSONStringWithPOST(\\n  url: RequestInfo,\\n  jsonString: string\\n): Promise<void> {\\n  await fetch(url, {\\n    method: \\\"post\\\",\\n    body: jsonString,\\n  });\\n}\\n\\nasync function requestStudent(id: string): Promise<Student[]> {\\n  let response: Response = await fetch(\\n    `http://localhost:3000/student?_id=${id}`\\n  );\\n  let text: string = await response.text();\\n  return JSON.parse(text) as Student[];\\n}\\n\\nasync function requestStudents(): Promise<Student[]> {\\n  let response: Response = await fetch(\\\"http://localhost:3000/students\\\");\\n  let text: string = await response.text();\\n  return JSON.parse(text) as Student[];\\n}\\n\\nasync function requestFaculties(): Promise<Faculty[]> {\\n  let response: Response = await fetch(\\\"http://localhost:3000/faculties\\\");\\n  let text: string = await response.text();\\n  return JSON.parse(text) as Faculty[];\\n}\\n\\n//UI\\nasync function displayStudents(table: HTMLTableElement) {\\n  let students: Student[] = await requestStudents();\\n  let tbody: HTMLElement = <HTMLElement>table.querySelector(\\\"tbody\\\");\\n  removeChildren(tbody);\\n  for (let student of students) {\\n    let tr: HTMLTableRowElement = document.createElement(\\\"tr\\\");\\n    tr.dataset.id = student._id;\\n    for (let info of [\\n      student.studentNr,\\n      student.firstName,\\n      student.lastName,\\n      student.semester,\\n      student.faculty,\\n      student.course,\\n    ]) {\\n      let td: HTMLElement = document.createElement(\\\"td\\\");\\n      td.textContent = `${info}`;\\n      tr.appendChild(td);\\n    }\\n    tr.addEventListener(\\\"click\\\", editStudent);\\n    tbody.appendChild(tr);\\n  }\\n}\\n\\nasync function editStudent(event: Event) {\\n  let target: HTMLElement = <HTMLElement>event.currentTarget;\\n  let student: Student = (await requestStudent(target.dataset?.id || \\\"\\\"))[0];\\n  openStudentForm(student);\\n}\\n\\nfunction newStudent() {\\n  openStudentForm();\\n}\\n\\nasync function openStudentForm(student?: Student) {\\n  let faculties: Faculty[] = await requestFaculties();\\n  sessionStorage.setItem(\\\"faculties\\\", JSON.stringify(faculties));\\n  removeChildren(selectFaculty);\\n  for (let facultyInfo of faculties) {\\n    let option: HTMLOptionElement = <HTMLOptionElement>(\\n      document.createElement(\\\"option\\\")\\n    );\\n    option.value = facultyInfo.name;\\n    option.textContent = facultyInfo.name;\\n    selectFaculty.appendChild(option);\\n  }\\n  student = student || {\\n    _id: \\\"\\\",\\n    studentNr: NaN,\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n    semester: 1,\\n    faculty: faculties[0]?.name,\\n    course: \\\"\\\",\\n  };\\n  for (let info of [\\n    [\\\"_id\\\", student._id],\\n    [\\\"studentNr\\\", student.studentNr],\\n    [\\\"firstName\\\", student.firstName],\\n    [\\\"lastName\\\", student.lastName],\\n    [\\\"semester\\\", student.semester],\\n    [\\\"faculty\\\", student.faculty],\\n    [\\\"course\\\", student.course],\\n  ]) {\\n    let input: HTMLElement = <HTMLElement>document.querySelector(`#${info[0]}`);\\n    if (info[0] === \\\"semester\\\" && info[1]) {\\n      (<HTMLInputElement>(\\n        input.querySelector(`[value=\\\"${info[1]}\\\"]`)\\n      )).checked = true;\\n    } else {\\n      (<HTMLInputElement>input).value = `${info[1]}`;\\n    }\\n    if (info[0] === \\\"faculty\\\" && info[1]) {\\n      loadCourses(`${info[1]}`);\\n    }\\n  }\\n\\n  studentForm.setAttribute(\\\"class\\\", \\\"\\\");\\n}\\n\\nfunction closeForm() {\\n  studentForm.setAttribute(\\\"class\\\", \\\"hide\\\");\\n}\\n\\n//Helper\\nfunction removeChildren(element: HTMLElement) {\\n  while (element.firstChild) {\\n    element.removeChild(element.firstChild);\\n  }\\n}\\n\\nfunction loadCourses(facultyName: string) {\\n  let faculties: Faculty[] = JSON.parse(\\n    sessionStorage.getItem(\\\"faculties\\\") || \\\"\\\"\\n  );\\n  let facultyInfo: Faculty | undefined = faculties.find(\\n    f => f.name === facultyName\\n  );\\n  let selectCourse: HTMLSelectElement = <HTMLSelectElement>(\\n    document.querySelector(\\\"#course\\\")\\n  );\\n  removeChildren(selectCourse);\\n  for (let courseInfo of facultyInfo?.course || []) {\\n    let option: HTMLOptionElement = document.createElement(\\\"option\\\");\\n    option.value = courseInfo;\\n    option.textContent = courseInfo;\\n    selectCourse.appendChild(option);\\n  }\\n}\\n\\nfunction selectFacultyChange(event: Event) {\\n  let target: HTMLOptionElement = <HTMLOptionElement>event.currentTarget;\\n  loadCourses(target.value);\\n}\\n\\n//Submit Form\\nfunction onSubmitStudentForm(event: Event) {\\n  let formData: FormData = new FormData(<HTMLFormElement>event.currentTarget);\\n  sendJSONStringWithPOST(\\n    \\\"http://localhost:3000/student\\\",\\n    JSON.stringify({\\n      _id: formData.get(\\\"_id\\\"),\\n      studentNr: formData.get(\\\"studentNr\\\"),\\n      firstName: formData.get(\\\"firstName\\\"),\\n      lastName: formData.get(\\\"lastName\\\"),\\n      semester: formData.get(\\\"semester\\\"),\\n      faculty: formData.get(\\\"faculty\\\"),\\n      course: formData.get(\\\"course\\\"),\\n    })\\n  );\\n  event.preventDefault();\\n  closeForm();\\n  displayStudents(studentTable);\\n}\\n\\n//DOM Elemente\\nlet studentTable: HTMLTableElement = <HTMLTableElement>(\\n  document.getElementById(\\\"studentTable\\\")\\n);\\nlet studentForm: HTMLFormElement = <HTMLFormElement>(\\n  document.getElementById(\\\"studentForm\\\")\\n);\\nstudentForm.addEventListener(\\\"submit\\\", onSubmitStudentForm);\\nlet selectFaculty: HTMLSelectElement = <HTMLSelectElement>(\\n  document.querySelector(\\\"#faculty\\\")\\n);\\nselectFaculty.addEventListener(\\\"change\\\", selectFacultyChange);\\nlet cancelButton: HTMLButtonElement = <HTMLButtonElement>(\\n  document.querySelector(\\\"#cancel\\\")\\n);\\ncancelButton.addEventListener(\\\"click\\\", closeForm);\\nlet addButton: HTMLButtonElement = <HTMLButtonElement>(\\n  document.querySelector(\\\"#add\\\")\\n);\\naddButton.addEventListener(\\\"click\\\", newStudent);\\n\\n//Daten laden und anzeigen\\ndisplayStudents(studentTable);\\n\"))), mdx(\"h1\", null, \"Linksammlung\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wiki.selfhtml.org/wiki/HTML/Tutorials/Formulare/Was_ist_ein_Webformular%3F\"\n  }, \"https://wiki.selfhtml.org/wiki/HTML/Tutorials/Formulare/Was_ist_ein_Webformular%3F\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mediaevent.de/javascript/formdata.html\"\n  }, \"https://www.mediaevent.de/javascript/formdata.html\")), mdx(\"h3\", null, \"weiterf\\xFChrende Informationen\"), mdx(\"p\", null, \"Node.js + Files senden: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3schools.com/nodejs/nodejs_filesystem.asp\"\n  }, \"https://www.w3schools.com/nodejs/nodejs_filesystem.asp\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Formulare + Web-App","date":"13 December, 2021"}}},"pageContext":{"id":"dd144e4f-7eb2-5e0a-9aee-37690d374be5","heading":{"value":"Beispielanwendung","depth":1},"index":4,"prevSlug":"/lecture/formulare/3","nextSlug":"/lecture/formulare/5"}},
    "staticQueryHashes": ["170874137"]}